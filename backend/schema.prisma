// database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider             = "prisma-client-py"
  interface            = "sync"
  recursive_type_depth = 5
}

// data models
// FYI Model names are in PascalCase, and fields are in camelCase
// see: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#naming-conventions
model User {
  id             String   @id
  email          String   @unique
  hashedPassword String
  name           String
  bio            String?
  profilePicture String?
  location       String?
  phoneNumber    String?
  tutorInfo      Tutor?
  studentInfo    Student?
  adminInfo      Admin?
}

model Admin {
  id         String @id
  userInfo   User   @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId String @unique
}

model Student {
  id           String        @id
  userInfo     User          @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId   String        @unique
  appointments Appointment[]
}

model Tutor {
  id              String              @id
  userInfo        User                @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId      String              @unique
  ratings         Rating[]
  courseOfferings Subject[]
  timesAvailable  TutorAvailability[]
  appointments    Appointment[]
}

model Subject {
  name           String  @id
  tutorsTeaching Tutor[]
}

model TutorAvailability {
  id        String   @id
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId   String
  startTime DateTime
  endTime   DateTime
}

model Rating {
  id          String @id
  score       Int
  createdById String
  createdFor  Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId     String
}

model Appointment {
  id            String   @id
  startTime     DateTime
  endTime       DateTime
  tutorAccepted Boolean  @default(false)
  tutor         Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId       String
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId     String
}
