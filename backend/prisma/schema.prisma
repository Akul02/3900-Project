// database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator
generator client {
  provider               = "prisma-client-py"
  partial_type_generator = "prisma/partial_types.py"
  interface              = "sync"
  // see https://prisma-client-py.readthedocs.io/en/stable/reference/config/#recursive
  recursive_type_depth   = -1
}

// data models
// FYI Model names are in PascalCase, and fields are in camelCase
// see: https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#naming-conventions
model User {
  id                 String          @id
  email              String          @unique
  hashedPassword     String
  name               String
  bio                String?         @default("")
  profilePicture     String?
  location           String?
  phoneNumber        String?
  messages           Message[]
  fromDirectMessages DirectMessage[] @relation(name: "fromDirectMessage")
  toDirectMessages   DirectMessage[] @relation(name: "toDirectMessage")
  tutorialState      Boolean         @default(false)
  notifications      Notification[]
  // Note: This is a XOR relation
  tutorInfo          Tutor?
  studentInfo        Student?
  adminInfo          Admin?
}

model Admin {
  id         String @id
  userInfo   User   @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId String @unique
}

model Student {
  id           String        @id
  userInfo     User          @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId   String        @unique
  appointments Appointment[]
}

model Tutor {
  id              String              @id
  userInfo        User                @relation(fields: [userInfoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userInfoId      String              @unique
  documents       Document[]
  ratings         Rating[]
  courseOfferings Subject[]
  timesAvailable  TutorAvailability[]
  appointments    Appointment[]
}

model Document {
  id       String @id
  tutor    Tutor  @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId  String
  document String

  @@unique([id, tutorId])
}

model Subject {
  name           String  @id
  tutorsTeaching Tutor[]
}

model TutorAvailability {
  id        String   @id
  tutor     Tutor    @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId   String
  startTime DateTime
  endTime   DateTime

  @@unique([id, tutorId])
}

model Rating {
  id            String      @id
  score         Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointmentId String      @unique
  createdFor    Tutor       @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId       String

  @@unique([id, appointmentId])
  @@unique([id, tutorId])
  @@unique([appointmentId, tutorId])
}

model Appointment {
  id            String    @id
  startTime     DateTime
  endTime       DateTime
  tutorAccepted Boolean   @default(false)
  rating        Rating?
  tutor         Tutor     @relation(fields: [tutorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tutorId       String
  student       Student   @relation(fields: [studentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  studentId     String
  messages      Message[]

  @@unique([id, tutorId])
  @@unique([id, studentId])
}

model Message {
  id              String         @id
  sentTime        DateTime
  content         String
  sentBy          User           @relation(fields: [sentById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sentById        String
  notification    Notification?
  // Note: This is a XOR relation
  appointment     Appointment?   @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointmentId   String?
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  directMessageId String?

  @@unique([id, sentById])
  @@unique([id, appointmentId])
  @@unique([id, directMessageId])
  @@unique([sentById, appointmentId])
  @@unique([sentById, directMessageId])
}

model DirectMessage {
  id          String    @id
  messages    Message[]
  fromUser    User      @relation(fields: [fromUserId], references: [id], name: "fromDirectMessage", onDelete: Cascade, onUpdate: Cascade)
  fromUserId  String
  otherUser   User      @relation(fields: [otherUserId], references: [id], name: "toDirectMessage", onDelete: Cascade, onUpdate: Cascade)
  otherUserId String

  @@unique([id, fromUserId])
  @@unique([id, otherUserId])
  @@unique([fromUserId, otherUserId])
}

model Notification {
  id        String   @id
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  messageId String   @unique
  forUser   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  @@unique([id, messageId])
  @@unique([id, userId])
  @@unique([messageId, userId])
}
